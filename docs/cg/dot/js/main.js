let mouseX = 0;
let mouseY = 0;
let theta = 0;

const dotData = {
  size : {
    width : 31,
    height : 16
  },
  color : [
    [0x000000,0x000000,0x000000,0x000000,0x000000,0xFD1C26,0x000000,0x000000,0x000000,0xFD1C26,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x9FA1A4,0x9FA1A4,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x9FA1A4,0x9FA1A4,0x000000,0x000000],
    [0x000000,0x000000,0x000000,0x000000,0xFD1C26,0xFD1C26,0xFD1C26,0x000000,0xFD1C26,0xFD1C26,0xFD1C26,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x9FA1A4,0xFBBBB3,0xFBBBB3,0x9FA1A4,0x000000,0x0479C7,0x0479C7,0x000000,0x9FA1A4,0xFBBBB3,0xFBBBB3,0x9FA1A4,0x000000],
    [0x000000,0x000000,0x000000,0xFD1C26,0xFD1C26,0xFD1C26,0xFD1C26,0xFD1C26,0xFD1C26,0xFD1C26,0xFD1C26,0xFD1C26,0x000000,0x000000,0x000000,0x000000,0x000000,0x9FA1A4,0xFBBBB3,0xFBBBB3,0xFBBBB3,0x9FA1A4,0x0479C7,0x0479C7,0x0479C7,0x0479C7,0xFBBBB3,0xFBBBB3,0xFBBBB3,0xFBBBB3,0x9FA1A4],
    [0x000000,0x000000,0x000000,0xFD1C26,0xFD1C26,0xFD1C26,0xFD1C26,0xFD1C26,0xFD1C26,0xFD1C26,0xFD1C26,0xFD1C26,0x000000,0x000000,0x000000,0x000000,0x000000,0x9FA1A4,0xFBBBB3,0xFBBBB3,0xFBBBB3,0x3632AE,0xF9F927,0xF9F927,0x3632AE,0x0479C7,0xFBBBB3,0xFBBBB3,0xFBBBB3,0xFBBBB3,0x9FA1A4],
    [0x000000,0x000000,0xFD1C26,0xFD1C26,0x000000,0xFFFFFF,0xFFFFFF,0xFD1C26,0x000000,0xFFFFFF,0xFFFFFF,0xFD1C26,0xFD1C26,0x000000,0x000000,0x000000,0x000000,0x9FA1A4,0xFBBBB3,0x0479C7,0x0479C7,0x0479C7,0x0479C7,0x0479C7,0x0479C7,0x0479C7,0xFBBBB3,0xFBBBB3,0xFBBBB3,0xFBBBB3,0x9FA1A4],
    [0x000000,0x000000,0xFD1C26,0xFBBBB3,0xFBBBB3,0xFBBBB3,0xFBBBB3,0x000000,0xFBBBB3,0xFBBBB3,0xFBBBB3,0xFBBBB3,0xFD1C26,0x000000,0x000000,0x000000,0x000000,0x000000,0x9FA1A4,0xFBBBB3,0xFFFFFF,0xFFFFFF,0x9FA1A4,0xFFFFFF,0xFFFFFF,0x9FA1A4,0x9FA1A4,0xFBBBB3,0xFBBBB3,0xFBBBB3,0x9FA1A4],
    [0x000000,0xFBBBB3,0xFBBBB3,0xFBBBB3,0xFBBBB3,0xFBBBB3,0xFBBBB3,0xFBBBB3,0xFBBBB3,0xFBBBB3,0xFBBBB3,0xFBBBB3,0xFBBBB3,0xFBBBB3,0x000000,0x000000,0xF9F927,0x000000,0x000000,0x9FA1A4,0x000000,0xFFFFFF,0x9FA1A4,0x000000,0xFFFFFF,0x9FA1A4,0x9FA1A4,0xFBBBB3,0xFBBBB3,0x9FA1A4,0x00000],
    [0x000000,0x000000,0xFBBBB3,0xFBBBB3,0xFBBBB3,0xFBBBB3,0xFBBBB3,0xFBBBB3,0xFBBBB3,0xFBBBB3,0xFBBBB3,0xFBBBB3,0xFBBBB3,0x000000,0x000000,0x000000,0xF9F927,0x000000,0x000000,0x000000,0x9FA1A4,0x9FA1A4,0x9FA1A4,0x9FA1A4,0x9FA1A4,0x9FA1A4,0x9FA1A4,0x9FA1A4,0x9FA1A4,0x000000,0x00000],
    [0xFBBBB3,0xFBBBB3,0x000000,0xFD1C26,0xFBBBB3,0xFBBBB3,0xFBBBB3,0xFBBBB3,0x000000,0xFBBBB3,0xFBBBB3,0xFD1C26,0x000000,0x000000,0x000000,0x000000,0xF9F927,0x9FA1A4,0x000000,0xF8BF18,0x9FA1A4,0x9FA1A4,0x9FA1A4,0x9FA1A4,0x9FA1A4,0x9FA1A4,0x9FA1A4,0x9FA1A4,0x000000,0x000000,0x000000],
    [0x000000,0xFBBBB3,0xFD1C26,0xFD1C26,0xFD1C26,0x27F04D,0x3632AE,0x3632AE,0x3632AE,0x27F04D,0xFD1C26,0xFD1C26,0xFD1C26,0x000000,0x000000,0x000000,0x9FA1A4,0x9FA1A4,0x0479C7,0x0479C7,0x0479C7,0x0479C7,0x0479C7,0x0479C7,0x0479C7,0x0479C7,0x0479C7,0x0479C7,0x000000,0x000000,0x000000],
    [0x000000,0x000000,0xFD1C26,0xFD1C26,0xFD1C26,0x27F04D,0x3632AE,0x3632AE,0x3632AE,0x27F04D,0xFD1C26,0xFD1C26,0xFD1C26,0xFBBBB3,0x000000,0x000000,0x9FA1A4,0x9FA1A4,0x0479C7,0x0479C7,0x0479C7,0x0479C7,0x0479C7,0x0479C7,0x0479C7,0x0479C7,0x0479C7,0x0479C7,0x0479C7,0x000000,0x000000],
    [0x000000,0x000000,0x000000,0xFBBBB3,0xFBBBB3,0xFD1C26,0x27F04D,0x3632AE,0x27F04D,0xFD1C26,0xFD1C26,0xFD1C26,0x000000,0xFBBBB3,0xFBBBB3,0x000000,0x000000,0x000000,0x000000,0x000000,0xF9F927,0x0479C7,0x0479C7,0xF9F927,0x0479C7,0x0479C7,0xF9F927,0x000000,0x9FA1A4,0x9FA1A4,0x000000],
    [0x000000,0x000000,0xFBBBB3,0xFD1C26,0xFD1C26,0xFBBBB3,0xFD1C26,0x27F04D,0xFD1C26,0xFD1C26,0xFD1C26,0xFD1C26,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x0479C7,0x0479C7,0x0479C7,0x0479C7,0x0479C7,0x0479C7,0x0479C7,0x000000,0x9FA1A4,0x9FA1A4,0x000000],
    [0x000000,0x000000,0xFBBBB3,0xFD1C26,0xFD1C26,0xFBBBB3,0xFD1C26,0xFD1C26,0xFD1C26,0xFD1C26,0xFD1C26,0xFBBBB3,0xFBBBB3,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x0479C7,0x0479C7,0x0479C7,0x0479C7,0x0479C7,0x000000,0x000000,0x000000,0x000000,0x000000],
    [0x000000,0x000000,0xFBBBB3,0xFBBBB3,0xFBBBB3,0xFBBBB3,0xFD1C26,0xFD1C26,0xFD1C26,0xFD1C26,0xFBBBB3,0xFBBBB3,0xFBBBB3,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0xEA784C,0xEA784C,0xEA784C,0xEA784C,0x000000,0x000000,0x000000,0x000000,0x000000],
    [0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0xFBBBB3,0xFBBBB3,0xFBBBB3,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0x000000,0xEA784C,0xEA784C,0xEA784C,0xEA784C,0xEA784C,0x000000,0x000000,0x000000,0x000000,0x000000]
  ]
};

/**
 * チェッカーボードをつくる関数
 * @param  {dotData} data [description]
 */
function checkerBoard(data, meshs) {
  const geometry = new THREE.CubeGeometry(30, 0, 30);
  const material_A = new THREE.MeshPhongMaterial({color: 0x000000});
  const material_B = new THREE.MeshPhongMaterial({color: 0xFFFFFF});
  let count = 0;
  for (let i = 0; i < data.size.height + 20 ; i++) {
    for (let j = 0; j < data.size.width + 20 ; j++) {
      let mesh;
      if ((i + j) % 2) {
        mesh = new THREE.Mesh(geometry, material_A);
      } else {
        mesh = new THREE.Mesh(geometry, material_B);
      }
      meshInit (mesh, j * 30 - ((data.size.width + 20) * 30 / 2), -44, i * 30 - ((data.size.height + 20) * 30 / 2));
      meshs.push(mesh);
      scene.add(meshs[count]);
      count ++;
    }
  }
}

const clock = new THREE.Clock();
// シーンを生成
const scene = new THREE.Scene();

// フォグの設定
//scene.fog = new THREE.FogExp2(0xfac9f9, 0.001);

// カメラを生成
const width = window.innerWidth;
const height = window.innerHeight;
const fov = 55;
const aspect = width / height;
const near = 1;
const far = 2000;

const camera = new THREE.PerspectiveCamera(fov, aspect, near, far);
camera.position.set(0,0,800);

// パーティクル設定
const particleCount = 400;
const geometry = new THREE.CubeGeometry(28, 28, 28);
const xSpeed = 0.001;
const meshs = [];

let count = 0;
for (let i = 0; i < dotData.size.height; i++) {
  for (let j = 0; j < dotData.size.width; j++) {
    const material = new THREE.MeshPhongMaterial({color:dotData.color[i][j]});
    let mesh = new THREE.Mesh(geometry, material);
    meshInit (mesh, j * 30 - (dotData.size.width * 30 / 2), -30, i * 30 - (dotData.size.height * 30 / 2));
    meshs.push(mesh);
    scene.add(meshs[count]);
    count ++;
  }
}

const meshs_checker = [];
checkerBoard (dotData, meshs_checker);

// レンダラを追加
const renderer = new THREE.WebGLRenderer({ antialias: true });
renderer.setSize(width, height);
renderer.setClearColor( 0xCCCCCC );
document.body.appendChild(renderer.domElement);

// 光源を追加
const directionalLight = new THREE.DirectionalLight( 0xffffff );
directionalLight.position.set(0, 1, 0);
scene.add(directionalLight);

/**
 * マウス座標を取得するイベント
 */
document.body.addEventListener("mousemove", function(e){
  //座標を取得する
  mouseX = e.pageX;  //X座標
  mouseY = e.pageY;  //Y座標
});

/**
 * マウス位置によってカメラを動かす関数
 */
function cameraRotateMouse () {
  let cameraSpeed = (mouseX / width - 0.5) / 20;;
  theta -= cameraSpeed;
  camera.position.set (800 * Math.sin(theta / 10), 600, 800 * Math.cos(theta / 10));
}

/**
 * メッシュの初期化をする関数
 * @param  {mesh} mesh 個別のメッシュ情報
 */

/**
 * メッシュの初期化をする関数
 * @param  {mesh} mesh 個別のメッシュ情報
 * @param  {[type]} x    xの初期位置
 * @param  {[type]} y    yの初期位置
 * @param  {[type]} z    zの初期位置
 */
function meshInit (mesh, x, y, z) {
  // mesh.position.set(Math.random() * 1000 -500, Math.random() * 1200 - 600, Math.random() * 1000 -500);
  mesh.position.set(x, y, z);
  // mesh.rotation.set(Math.random()* 360, Math.random()* 360, Math.random()* 360);
  mesh.rotation.set(0, 0, 0);
  // mesh.userData.ySpeed = Math.random() / 2000 + 0.0001;
  mesh.userData.ySpeed = 0;
  // mesh.userData.rotateSpeed = (Math.random() * 100 - 50) / 3000;
  mesh.userData.rotateSpeed = 0;
  // mesh.userData.velocity = new THREE.Vector3((Math.random() * 100 - 50) / 200 , - Math.random(), (Math.random() * 100 - 50) / 200);
  mesh.userData.velocity = new THREE.Vector3(0 , 0, 0);
}

/**
 * メッシュを再配置する関数
 * @param {mesh} mesh 個別のメッシュ情報
 */
function meshReset (mesh) {
  mesh.position.set(Math.random() * 1000 -500, 500, Math.random() * 1000 -500);
  mesh.userData.ySpeed = Math.random() / 2000 + 0.0003;
  mesh.userData.rotateSpeed = (Math.random() * 100 - 50) / 3000;
  mesh.userData.velocity.set((Math.random() * 100 - 50) / 200 , - Math.random(), (Math.random() * 100 - 50) / 200);
}

/**
 * メッシュをアニメーションさせる関数
 * @param  {meshs[]} meshs 各メッシュをまとめた配列
 */
function meshAnimate (meshs) {
  let Count = particleCount;
  while (Count--) {
    const mesh = meshs[Count];
    if (mesh.position.y < -600){
      meshReset (mesh);
    }
    mesh.userData.velocity.y -= Math.random() * mesh.userData.ySpeed;
    mesh.rotation.set(mesh.rotation.y + mesh.userData.rotateSpeed, mesh.rotation.y + mesh.userData.rotateSpeed, mesh.rotation.z + mesh.userData.rotateSpeed);
    mesh.position.add(mesh.userData.velocity);
  }
}

(
  /**
   * アニメーションさせる関数
   */
  function animate () {
    requestAnimationFrame (animate);  // フレーム更新する関数

    // ここにアニメーションを記述
    cameraRotateMouse ();
    meshAnimate (meshs);

    // 描画
    camera.lookAt(scene.position);
    renderer.render(scene, camera);
  }
)();
